pipeline {
    agent any

    tools {
        jdk 'jdk17'           // Must match the name in Jenkins Global Tool Configuration
        nodejs 'node23'       // Must match installed NodeJS tool in Jenkins
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {

        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Check Java & Node') {
            steps {
                sh 'java -version'
                sh 'javac -version'
                sh 'node -v'
                sh 'npm -v'
            }
        }

        stage('Git Checkout') {
            steps {
                git 'https://github.com/Prasadazure/DevOps-Project-Zomato-Kastro.git'
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    withEnv([
                        "JAVA_HOME=${tool 'jdk17'}",
                        "PATH+JAVA=${tool 'jdk17'}/bin"
                    ]) {
                        sh '''
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectName=zomato \
                            -Dsonar.projectKey=zomato
                        '''
                    }
                }
            }
        }

        stage('Code Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
            }
        }

        stage('Install NPM Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('OWASP FS Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit -n', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Trivy File Scan') {
            steps {
                sh 'trivy fs . > trivy.txt'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t zomato .'
            }
        }

        stage('Tag & Push to DockerHub') {
            steps {
                withDockerRegistry(credentialsId: 'docker', url: 'https://index.docker.io/v1/') {
                    sh 'docker tag zomato adminprasad/zomato:latest'
                    sh 'docker push adminprasad/zomato:latest'
                }
            }
        }

        stage('Docker Scout Image') {
            steps {
                withDockerRegistry(credentialsId: 'docker', url: 'https://index.docker.io/v1/') {
                    sh 'docker-scout quickview adminprasad/zomato:latest'
                    sh 'docker-scout cves adminprasad/zomato:latest'
                    sh 'docker-scout recommendations adminprasad/zomato:latest'
                }
            }
        }

        stage('Deploy to Container') {
            steps {
                sh 'docker rm -f zomato || true'   // remove previous container if exists
                sh 'docker run -d --name zomato -p 3000:3000 adminprasad/zomato:latest'
            }
        }
    }
}
