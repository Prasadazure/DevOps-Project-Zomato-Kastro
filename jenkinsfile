pipeline {
    agent any

    environment {
        // ----- Update these paths for your Jenkins server -----
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'  // Example Java path (check using: which java)
        PATH = "${JAVA_HOME}/bin:${env.PATH}"

        // Sonar Scanner installation name as configured in Jenkins -> Manage Jenkins -> Global Tool Configuration
        SCANNER_HOME = tool 'sonar-scanner'

        // DockerHub & SonarQube credentials IDs configured in Jenkins
        DOCKER_CREDENTIALS = 'docker'
        SONARQUBE_SERVER   = 'sonar-server'
        SONARQUBE_TOKEN    = 'Sonar-token'
    }

    stages {

        stage('Check Tools') {
            steps {
                echo 'Checking Java, Node, and NPM versions...'
                sh 'java -version'
                sh 'javac -version'
                sh 'node -v'
                sh 'npm -v'
            }
        }

        stage('Install NPM Dependencies') {
            steps {
                echo 'Installing Node.js dependencies...'
                sh 'npm install'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube Code Analysis...'
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=zomato \
                            -Dsonar.projectName=zomato \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=$SONAR_HOST_URL \
                            -Dsonar.login=$SONAR_AUTH_TOKEN
                    """
                }
            }
        }

        stage('Code Quality Gate') {
            steps {
                echo 'Waiting for SonarQube Quality Gate result...'
                waitForQualityGate abortPipeline: false, credentialsId: "${SONARQUBE_TOKEN}"
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                echo 'Running OWASP Dependency Vulnerability Scan...'
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit -n',
                                odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Trivy File Scan') {
            steps {
                echo 'Running Trivy File System Scan...'
                sh 'trivy fs . > trivy.txt'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker Image...'
                sh 'docker build -t zomato .'
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                echo 'Tagging & Pushing Docker Image to DockerHub...'
                withDockerRegistry(credentialsId: "${DOCKER_CREDENTIALS}", url: 'https://index.docker.io/v1/') {
                    sh '''
                        docker tag zomato adminprasad/zomato:latest
                        docker push adminprasad/zomato:latest
                    '''
                }
            }
        }

        stage('Docker Scout Image Scan') {
            steps {
                echo 'Running Docker Scout Image Scans...'
                withDockerRegistry(credentialsId: "${DOCKER_CREDENTIALS}", url: 'https://index.docker.io/v1/') {
                    sh '''
                        docker-scout quickview adminprasad/zomato:latest
                        docker-scout cves adminprasad/zomato:latest
                        docker-scout recommendations adminprasad/zomato:latest
                    '''
                }
            }
        }

        stage('Deploy Container') {
            steps {
                echo 'Deploying container...'
                sh '''
                    docker rm -f zomato || true
                    docker run -d --name zomato -p 3000:3000 adminprasad/zomato:latest
                '''
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
    }
}
